buildscript {
	repositories {
		mavenCentral()
		//maven {
		//	name = "forge"
		//	url = "https://files.minecraftforge.net/maven"
		//}
		maven {
			name = "gt"
			url = "https://gregtech.mechaenetia.com/"
		}
		maven {
			name = "gtnh"
			url = "http://jenkins.usrv.eu:8081/nexus/content/groups/public/"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:1.2.11'
		//classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
		//classpath 'net.onedaybeard.artemis:artemis-odb-gradle-plugin:2.2.0'
		//classpath 'net.onedaybeard.artemis:artemis-fluid-gradle-plugin:2.2.0'
	}
}

repositories {
    maven {
        name = "ChickenBones"
        url = "https://chickenbones.net/maven"
    }
}

apply plugin: 'forge'
//apply plugin: 'curseforge'

sourceCompatibility = 1.7
targetCompatibility = 1.7

// define the properties file
ext.configFile = file "project.properties"

configFile.withReader {
    // read config.  it shall from now on be referenced as simply config or as project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

def buildnumber = System.getenv("BUILD_NUMBER")
def travisbuildnumber = (System.getenv("TRAVIS_BUILD_NUMBER") ?: -111).toInteger() + 111
version = "${config.minecraft_version}-${config.mod_version}." + (buildnumber ?: travisbuildnumber)
group= "${config.group_id}" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "${config.mod_id}"
def numina_version = (System.getenv("NUMINA_VERSION") ?:"0.4.1.105")

minecraft {
    version = "1.7.10-10.13.4.1614-1.7.10"
    replace "@numina_version@", numina_version
    replace "@VERSION@", project.version
    runDir = "run"
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}

new File(config.libs_dir).mkdirs()
def getLibrary(filename) {
    def f = new File(config.libs_dir + filename)
    if (!f.exists()) {
        new URL(config.apisource_url + filename).withInputStream{ i -> f.withOutputStream{ it << i }}
    }
    dependencies {
        compile files(config.libs_dir + filename)
    }
}

dependencies {
    compile 'codechicken:CodeChickenCore:1.7.10-1.0.7.47:dev'
    compile 'codechicken:NotEnoughItems:1.7.10-1.0.5.120:dev'
    compile 'codechicken:CodeChickenLib:1.7.10-1.1.3.140:dev'
    compileOnly "appeng:appliedenergistics2:rv3-beta-6:dev"
    compileOnly "cofh:CoFHCore:1.7.10R3.0.4:dev"
    compileOnly "cofh:CoFHLib:1.7.10R3.0.3:dev"
    compileOnly "ic2:IC2Classic:1.2.1.8:dev"
    compileOnly "net.machinemuse:Numina:0.4.1.105"
}



/*
repositories {
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
}

dependencies {
	compile 'net.industrial-craft:industrialcraft-2:2.2.826-experimental:api'
}


*/


//getLibrary("CoFHCore-[1.7.10]3.0.3-303-dev.jar")
////getLibrary("industrialcraft-2-2.2.765-experimental-api.jar")
//getLibrary("ThermalExpansion-[1.7.10]4.0.3B1-218-dev.jar")
//getLibrary("GalacticraftCore-Dev-1.7-3.0.12.168.jar")
//getLibrary("Railcraft_1.7.10-9.7.0.0-dev.jar") // delete outdated CoFH API from this jar to run in dev environment
//getLibrary("MineFactoryReloaded-[1.7.10]2.8.0-104-dev.jar")
//getLibrary("forestry_1.7.10-3.6.3.20-api.jar")
//getLibrary("Thaumcraft-deobf-1.7.10-4.2.3.5.jar")
//getLibrary("SmartRender-1.7.10-2.1.jar") // this version is ok to build with, but to run in dev environment, download the SmartMoving zip and use the version from that
//getLibrary("RenderPlayerAPI-1.7.10-1.4.jar")
//getLibrary("appliedenergistics2-rv2-stable-10-dev.jar")
//getLibrary("ExtraCells-deobf-1.7.10-2.3.2b158.jar") // This one may have to be downloaded manually
//getLibrary("buildcraft-7.0.21-dev.jar")
//getLibrary("BluePower-1.7.10-0.2.962-universal.jar")
//getLibrary("EnderIO-1.7.10-2.2.8.381-dev.jar") // May need to delete Mekanism API from this jar to run in dev environment
//getLibrary("Mekanism-1.7.10-8.1.7.252.jar")
//getLibrary("MrTJPCore-1.1.0.31-universal.jar")
//getLibrary("ProjectRed-1.7.10-4.7.0pre8.92-Base.jar")
////getLibrary("Chisel2-2.5.0.43-deobf.jar")
////getLibrary("Chisel-2.9.0.3-deobf.jar")
//getLibrary("compactmachines-1.7.10-1.20-dev.jar") // This is for the personal shrinking device module; needs to be built from source.

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes 'FMLAT': 'numina_at.cfg'
    }
}

task devJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(sourceSets.main.resources.srcDirs){
        include 'mps-vanilla.recipes'
        include 'mps-thermalexpansion.recipes'
        include 'mps-ic2.recipes'
        include 'mps-enderio.recipes'
    }
}

def getGitChangelog = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        def gitHash = System.getenv("GIT_COMMIT")
        def gitPrevHash = System.getenv("GIT_PREVIOUS_COMMIT")
        if(gitHash && gitPrevHash) {
            exec {
                commandLine 'git', 'log', '--pretty=tformat:%s - %aN', '' + gitPrevHash + '...' + gitHash
                standardOutput = stdout
            }
            return stdout.toString().trim()
        } else {
            return "";
        }
    } catch(ignored) {
        return "";
    }
}


build.dependsOn(copyToLib)

artifacts {
    archives devJar
}

/*curse {
    projectId = '235442'
    apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''
    def branch = System.getenv("GIT_BRANCH")
    if(branch == null) {
        releaseType = 'alpha'
    } else if(branch.equals("origin/experimental")) {
        releaseType = 'beta'
    } else if(branch.equals("origin/master")) {
        releaseType = 'release'
    } else {
        releaseType = 'alpha'
    }

    changelog = getGitChangelog()

    addGameVersion '1.7.10'

    relatedProject 'numina': 'requiredLibrary'
}*/

apply plugin: 'idea'
idea {
    module {
        inheritOutputDirs = true
    }
}
